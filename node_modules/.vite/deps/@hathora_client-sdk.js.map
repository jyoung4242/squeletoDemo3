{
  "version": 3,
  "sources": ["../../jwt-decode/lib/atob.js", "../../jwt-decode/lib/base64_url_decode.js", "../../jwt-decode/lib/index.js", "../../isomorphic-ws/browser.js", "../../@hathora/client-sdk/lib/connection.js", "../../@hathora/client-sdk/lib/client.js"],
  "sourcesContent": ["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;", "import atob from \"./atob\";\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(\n        atob(str).replace(/(.)/g, function(m, p) {\n            var code = p.charCodeAt(0).toString(16).toUpperCase();\n            if (code.length < 2) {\n                code = \"0\" + code;\n            }\n            return \"%\" + code;\n        })\n    );\n}\n\nexport default function(str) {\n    var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n\n    try {\n        return b64DecodeUnicode(output);\n    } catch (err) {\n        return atob(output);\n    }\n}", "\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}", "// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nexport default ws\n", "import WebSocket from \"isomorphic-ws\";\nexport class HathoraConnection {\n    roomId;\n    connectionInfo;\n    socket;\n    messageListeners = [];\n    closeListeners = [];\n    stringEncoder = new TextEncoder();\n    stringDecoder = new TextDecoder();\n    constructor(roomId, connectionInfo) {\n        this.roomId = roomId;\n        this.connectionInfo = connectionInfo;\n    }\n    onMessage(listener) {\n        this.messageListeners.push(listener);\n    }\n    onMessageString(listener) {\n        this.messageListeners.push((buf) => {\n            listener(this.stringDecoder.decode(buf));\n        });\n    }\n    onMessageJson(listener) {\n        this.onMessageString((str) => {\n            listener(JSON.parse(str));\n        });\n    }\n    onClose(listener) {\n        this.closeListeners.push(listener);\n    }\n    async connect(token) {\n        const { host, port, transportType } = this.connectionInfo;\n        this.socket = new WebSocket(`${transportType === \"tls\" ? \"wss\" : \"ws\"}://${host}:${port}/${this.roomId}?token=${token}`);\n        this.socket.binaryType = \"arraybuffer\";\n        return new Promise((resolve, reject) => {\n            this.socket.onopen = () => {\n                resolve();\n            };\n            this.socket.onclose = (e) => {\n                reject(e.reason);\n                this._onClose(e);\n            };\n            this.socket.onmessage = ({ data }) => {\n                if (!(data instanceof ArrayBuffer)) {\n                    throw new Error(\"Unexpected data type: \" + typeof data);\n                }\n                this._onMessage(data);\n            };\n        });\n    }\n    write(data) {\n        this.socket?.send(data);\n    }\n    writeString(data) {\n        this.write(this.stringEncoder.encode(data));\n    }\n    writeJson(data) {\n        this.writeString(JSON.stringify(data));\n    }\n    disconnect(code) {\n        if (code === undefined) {\n            this.socket.onclose = () => { };\n        }\n        this.socket.close(code);\n    }\n    _onMessage(data) {\n        this.messageListeners.forEach((listener) => listener(data));\n    }\n    _onClose(e) {\n        this.closeListeners.forEach((listener) => listener(e));\n    }\n}\n", "import jwtDecode from \"jwt-decode\";\nimport { HathoraConnection } from \"./connection\";\nexport class HathoraClient {\n    appId;\n    localConnectionDetails;\n    static getUserFromToken(token) {\n        return jwtDecode(token);\n    }\n    constructor(appId, localConnectionDetails) {\n        this.appId = appId;\n        this.localConnectionDetails = localConnectionDetails;\n    }\n    async loginAnonymous() {\n        const res = await this.postJson(`https://api.hathora.dev/auth/v1/${this.appId}/login/anonymous`, {});\n        return res.token;\n    }\n    async loginNickname(nickname) {\n        const res = await this.postJson(`https://api.hathora.dev/auth/v1/${this.appId}/login/nickname`, { nickname });\n        return res.token;\n    }\n    async loginGoogle(idToken) {\n        const res = await this.postJson(`https://api.hathora.dev/auth/v1/${this.appId}/login/google`, { idToken });\n        return res.token;\n    }\n    async createPrivateLobby(token, { region = \"Washington_DC\", initialConfig = {} } = {}) {\n        const visibility = this.localConnectionDetails !== undefined ? \"local\" : \"private\";\n        const { roomId } = await this.postJson(`https://api.hathora.dev/lobby/v2/${this.appId}/create`, { visibility, region, initialConfig }, { Authorization: token });\n        return roomId;\n    }\n    async createPublicLobby(token, { region = \"Washington_DC\", initialConfig = {} } = {}) {\n        const visibility = this.localConnectionDetails !== undefined ? \"local\" : \"public\";\n        const { roomId } = await this.postJson(`https://api.hathora.dev/lobby/v2/${this.appId}/create`, { visibility, region, initialConfig }, { Authorization: token });\n        return roomId;\n    }\n    async getPublicLobbies(token, region) {\n        const regionParam = region === undefined ? \"\" : `?region=${region}`;\n        const res = await fetch(`https://api.hathora.dev/lobby/v2/${this.appId}/list/public${regionParam}`, { headers: { Authorization: token } });\n        return await res.json();\n    }\n    async getConnectionDetailsForRoomId(roomId) {\n        if (this.localConnectionDetails !== undefined) {\n            return this.localConnectionDetails;\n        }\n        const res = await fetch(`https://api.hathora.dev/rooms/v1/${this.appId}/connectioninfo/${roomId}`);\n        const connectionInfo = await res.json();\n        if (connectionInfo.status === \"starting\") {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(this.getConnectionDetailsForRoomId(roomId));\n                }, 1000);\n            });\n        }\n        return connectionInfo;\n    }\n    async newConnection(roomId) {\n        const connectionDetails = await this.getConnectionDetailsForRoomId(roomId);\n        return new HathoraConnection(roomId, connectionDetails);\n    }\n    async postJson(url, body, headers = {}) {\n        const res = await fetch(url, {\n            method: \"POST\",\n            headers: { ...headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n        });\n        return await res.json();\n    }\n}\n"],
  "mappings": "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",
  "names": ["InvalidCharacterError", "message", "this", "prototype", "Error", "name", "window", "atob", "bind", "input", "str", "String", "replace", "length", "bs", "buffer", "bc", "idx", "output", "charAt", "fromCharCode", "indexOf", "decodeURIComponent", "m", "p", "code", "charCodeAt", "toString", "toUpperCase", "err", "InvalidTokenError", "token", "options", "pos", "header", "JSON", "parse", "base64_url_decode", "split", "e", "e"]
}
