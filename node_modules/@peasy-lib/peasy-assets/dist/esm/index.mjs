class Assets {
    static get pending() {
        return this.requested - this.loaded;
    }
    static initialize(s = {}) {
        Assets.initialized = true;
        if (s.src != null) Assets.sources.default = s.src;
    }
    static load(s) {
        return Promise.all(s.map((async s => {
            if (typeof s === "string") s = {
                src: s
            };
            const t = `${Assets.sources.default}${s.src ?? ""}`;
            const e = s.family != null ? "font" : Assets.types[s.type ?? t.split(".").pop() ?? ""];
            const i = Assets.loaders[e];
            if (i == null) return null;
            let a = s.name;
            if (a == null) if (e === "font") a = s.family; else {
                a = t.split("/").pop() ?? "";
                const s = a.split(".");
                s.pop();
                a = s.join(".");
            }
            Assets.requested++;
            const n = i(t, s);
            Assets.assets[e][a] = await n;
            Assets.loaded++;
            return n;
        })));
    }
    static clear() {
        Assets.assets = {
            image: {},
            audio: {},
            font: {}
        };
        Assets.requested = 0;
        Assets.loaded = 0;
        return Promise.resolve();
    }
    static image(s) {
        return Assets.assets.image[s];
    }
    static audio(s) {
        return Assets.assets.audio[s];
    }
    static font(s) {
        return Assets.assets.font[s];
    }
    static loadImage(s) {
        return new Promise((async t => {
            const e = new Image;
            e.onprogress = (...s) => console.log("progress", s);
            e.onload = () => t(e);
            e.src = await fetch(s).then((s => s.url));
        }));
    }
    static loadAudio(s) {
        return new Promise((t => {
            const e = new Audio;
            e.addEventListener("progress", ((...s) => console.log("progress", s)));
            e.oncanplaythrough = () => t(e);
            e.src = s;
        }));
    }
    static loadFont(s, t) {
        if (!s.startsWith("url(")) s = `url(${s})`;
        return new Promise((async e => {
            const i = new FontFace(t.family, s, t.descriptors ?? {});
            await i.load();
            document.fonts.add(i);
            e(i);
        }));
    }
}

Assets.initialized = false;

Assets.sources = {
    default: "/assets/"
};

Assets.assets = {
    image: {},
    audio: {},
    font: {}
};

Assets.requested = 0;

Assets.loaded = 0;

Assets.types = {
    image: "image",
    audio: "audio",
    png: "image",
    svg: "image",
    jpg: "image",
    jpeg: "image",
    gif: "image",
    mp3: "audio",
    wav: "audio"
};

Assets.loaders = {
    image: Assets.loadImage,
    audio: Assets.loadAudio,
    font: Assets.loadFont
};

export { Assets };
//# sourceMappingURL=index.mjs.map
