class Assets {
    static get pending() {
        return this.requested - this.loaded;
    }
    static initialize(input = {}) {
        Assets.initialized = true;
        if (input.src != null) {
            Assets.sources.default = input.src;
        }
    }
    static load(assets) {
        return Promise.all(assets.map(async (asset) => {
            if (typeof asset === 'string') {
                asset = { src: asset };
            }
            const src = `${Assets.sources.default}${asset.src ?? ''}`;
            const type = asset.family != null ? 'font'
                : Assets.types[asset.type ?? src.split('.').pop() ?? ''];
            const loader = Assets.loaders[type];
            if (loader == null) {
                return null;
            }
            let name = asset.name;
            if (name == null) {
                if (type === 'font') {
                    name = asset.family;
                }
                else {
                    name = src.split('/').pop() ?? '';
                    const parts = name.split('.');
                    parts.pop();
                    name = parts.join('.');
                }
            }
            Assets.requested++;
            const promise = loader(src, asset);
            Assets.assets[type][name] = await promise;
            Assets.loaded++;
            return promise;
        }));
    }
    static clear() {
        Assets.assets = {
            image: {},
            audio: {},
            font: {},
        };
        Assets.requested = 0;
        Assets.loaded = 0;
        return Promise.resolve();
    }
    static image(name) {
        return Assets.assets.image[name];
    }
    static audio(name) {
        return Assets.assets.audio[name];
    }
    static font(name) {
        return Assets.assets.font[name];
    }
    static loadImage(url) {
        return new Promise(async (resolve) => {
            const img = new Image();
            img.onprogress = (...args) => console.log('progress', args);
            img.onload = () => resolve(img);
            img.src = await fetch(url).then(res => res.url);
        });
    }
    static loadAudio(url) {
        return new Promise(resolve => {
            const audio = new Audio();
            audio.addEventListener('progress', (...args) => console.log('progress', args));
            audio.oncanplaythrough = () => resolve(audio);
            audio.src = url;
        });
    }
    static loadFont(url, asset) {
        if (!url.startsWith('url(')) {
            url = `url(${url})`;
        }
        return new Promise(async (resolve) => {
            const font = new FontFace(asset.family, url, asset.descriptors ?? {});
            await font.load();
            document.fonts.add(font);
            resolve(font);
        });
    }
}
Assets.initialized = false;
Assets.sources = { default: '/assets/' };
Assets.assets = {
    image: {},
    audio: {},
    font: {},
};
Assets.requested = 0;
Assets.loaded = 0;
Assets.types = {
    image: 'image',
    audio: 'audio',
    png: 'image',
    svg: 'image',
    jpg: 'image',
    jpeg: 'image',
    gif: 'image',
    mp3: 'audio',
    wav: 'audio',
};
Assets.loaders = {
    image: Assets.loadImage,
    audio: Assets.loadAudio,
    font: Assets.loadFont,
};

export { Assets };
//# sourceMappingURL=index.dev.mjs.map
