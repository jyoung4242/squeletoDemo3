/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AppConfigToJSON, ApplicationFromJSON, ApplicationWithDeploymentFromJSON, } from '../models';
/**
 *
 */
export class AppV1Api extends runtime.BaseAPI {
    /**
     */
    createAppRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appConfig === null || requestParameters.appConfig === undefined) {
                throw new runtime.RequiredError('appConfig', 'Required parameter requestParameters.appConfig was null or undefined when calling createApp.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/apps/v1/create`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AppConfigToJSON(requestParameters.appConfig),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
        });
    }
    /**
     */
    createApp(appConfig, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createAppRaw({ appConfig: appConfig }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    deleteAppRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling deleteApp.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/apps/v1/delete/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    deleteApp(appId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteAppRaw({ appId: appId }, initOverrides);
        });
    }
    /**
     */
    getAppInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getAppInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/apps/v1/info/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
        });
    }
    /**
     */
    getAppInfo(appId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAppInfoRaw({ appId: appId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    getAppsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/apps/v1/list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationWithDeploymentFromJSON));
        });
    }
    /**
     */
    getApps(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAppsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    updateAppRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling updateApp.');
            }
            if (requestParameters.appConfig === null || requestParameters.appConfig === undefined) {
                throw new runtime.RequiredError('appConfig', 'Required parameter requestParameters.appConfig was null or undefined when calling updateApp.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/apps/v1/update/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AppConfigToJSON(requestParameters.appConfig),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
        });
    }
    /**
     */
    updateApp(appId, appConfig, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateAppRaw({ appId: appId, appConfig: appConfig }, initOverrides);
            return yield response.value();
        });
    }
}
