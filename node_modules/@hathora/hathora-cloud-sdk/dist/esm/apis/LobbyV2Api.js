/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CreateLobbyRequestToJSON, CreatePrivateLobbyRequestToJSON, LobbyFromJSON, SetLobbyStateRequestToJSON, } from '../models';
/**
 *
 */
export class LobbyV2Api extends runtime.BaseAPI {
    /**
     */
    createLobbyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createLobby.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling createLobby.');
            }
            if (requestParameters.createLobbyRequest === null || requestParameters.createLobbyRequest === undefined) {
                throw new runtime.RequiredError('createLobbyRequest', 'Required parameter requestParameters.createLobbyRequest was null or undefined when calling createLobby.');
            }
            const queryParameters = {};
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['Authorization'] = String(requestParameters.authorization);
            }
            const response = yield this.request({
                path: `/lobby/v2/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateLobbyRequestToJSON(requestParameters.createLobbyRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
        });
    }
    /**
     */
    createLobby(appId, authorization, createLobbyRequest, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createLobbyRaw({ appId: appId, authorization: authorization, createLobbyRequest: createLobbyRequest, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    createLocalLobbyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createLocalLobby.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling createLocalLobby.');
            }
            if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === undefined) {
                throw new runtime.RequiredError('createPrivateLobbyRequest', 'Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createLocalLobby.');
            }
            const queryParameters = {};
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['Authorization'] = String(requestParameters.authorization);
            }
            const response = yield this.request({
                path: `/lobby/v2/{appId}/create/local`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
        });
    }
    /**
     */
    createLocalLobby(appId, authorization, createPrivateLobbyRequest, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createLocalLobbyRaw({ appId: appId, authorization: authorization, createPrivateLobbyRequest: createPrivateLobbyRequest, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    createPrivateLobbyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createPrivateLobby.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling createPrivateLobby.');
            }
            if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === undefined) {
                throw new runtime.RequiredError('createPrivateLobbyRequest', 'Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createPrivateLobby.');
            }
            const queryParameters = {};
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['Authorization'] = String(requestParameters.authorization);
            }
            const response = yield this.request({
                path: `/lobby/v2/{appId}/create/private`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
        });
    }
    /**
     */
    createPrivateLobby(appId, authorization, createPrivateLobbyRequest, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createPrivateLobbyRaw({ appId: appId, authorization: authorization, createPrivateLobbyRequest: createPrivateLobbyRequest, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    createPublicLobbyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createPublicLobby.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling createPublicLobby.');
            }
            if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === undefined) {
                throw new runtime.RequiredError('createPrivateLobbyRequest', 'Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createPublicLobby.');
            }
            const queryParameters = {};
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['Authorization'] = String(requestParameters.authorization);
            }
            const response = yield this.request({
                path: `/lobby/v2/{appId}/create/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
        });
    }
    /**
     */
    createPublicLobby(appId, authorization, createPrivateLobbyRequest, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createPublicLobbyRaw({ appId: appId, authorization: authorization, createPrivateLobbyRequest: createPrivateLobbyRequest, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    getLobbyInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getLobbyInfo.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling getLobbyInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/lobby/v2/{appId}/info/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
        });
    }
    /**
     */
    getLobbyInfo(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLobbyInfoRaw({ appId: appId, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    listActivePublicLobbiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling listActivePublicLobbies.');
            }
            const queryParameters = {};
            if (requestParameters.region !== undefined) {
                queryParameters['region'] = requestParameters.region;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/lobby/v2/{appId}/list/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LobbyFromJSON));
        });
    }
    /**
     */
    listActivePublicLobbies(appId, region, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listActivePublicLobbiesRaw({ appId: appId, region: region }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    setLobbyStateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling setLobbyState.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling setLobbyState.');
            }
            if (requestParameters.setLobbyStateRequest === null || requestParameters.setLobbyStateRequest === undefined) {
                throw new runtime.RequiredError('setLobbyStateRequest', 'Required parameter requestParameters.setLobbyStateRequest was null or undefined when calling setLobbyState.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/lobby/v2/{appId}/setState/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SetLobbyStateRequestToJSON(requestParameters.setLobbyStateRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
        });
    }
    /**
     */
    setLobbyState(appId, roomId, setLobbyStateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setLobbyStateRaw({ appId: appId, roomId: roomId, setLobbyStateRequest: setLobbyStateRequest }, initOverrides);
            return yield response.value();
        });
    }
}
