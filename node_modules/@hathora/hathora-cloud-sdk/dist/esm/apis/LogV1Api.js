/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
/**
 *
 */
export class LogV1Api extends runtime.BaseAPI {
    /**
     */
    getLogsForAppRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getLogsForApp.');
            }
            const queryParameters = {};
            if (requestParameters.follow !== undefined) {
                queryParameters['follow'] = requestParameters.follow;
            }
            if (requestParameters.tailLines !== undefined) {
                queryParameters['tailLines'] = requestParameters.tailLines;
            }
            if (requestParameters.region !== undefined) {
                queryParameters['region'] = requestParameters.region;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/logs/v1/{appId}/all`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    getLogsForApp(appId, follow, tailLines, region, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLogsForAppRaw({ appId: appId, follow: follow, tailLines: tailLines, region: region }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    getLogsForDeploymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getLogsForDeployment.');
            }
            if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
                throw new runtime.RequiredError('deploymentId', 'Required parameter requestParameters.deploymentId was null or undefined when calling getLogsForDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.follow !== undefined) {
                queryParameters['follow'] = requestParameters.follow;
            }
            if (requestParameters.tailLines !== undefined) {
                queryParameters['tailLines'] = requestParameters.tailLines;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/logs/v1/{appId}/deployment/{deploymentId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    getLogsForDeployment(appId, deploymentId, follow, tailLines, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLogsForDeploymentRaw({ appId: appId, deploymentId: deploymentId, follow: follow, tailLines: tailLines }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    getLogsForProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getLogsForProcess.');
            }
            if (requestParameters.processId === null || requestParameters.processId === undefined) {
                throw new runtime.RequiredError('processId', 'Required parameter requestParameters.processId was null or undefined when calling getLogsForProcess.');
            }
            const queryParameters = {};
            if (requestParameters.follow !== undefined) {
                queryParameters['follow'] = requestParameters.follow;
            }
            if (requestParameters.tailLines !== undefined) {
                queryParameters['tailLines'] = requestParameters.tailLines;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/logs/v1/{appId}/process/{processId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    getLogsForProcess(appId, processId, follow, tailLines, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLogsForProcessRaw({ appId: appId, processId: processId, follow: follow, tailLines: tailLines }, initOverrides);
            return yield response.value();
        });
    }
}
