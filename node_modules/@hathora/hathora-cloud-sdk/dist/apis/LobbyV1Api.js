"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LobbyV1Api = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class LobbyV1Api extends runtime.BaseAPI {
    /**
     */
    createPrivateLobbyDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createPrivateLobbyDeprecated.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling createPrivateLobbyDeprecated.');
            }
            const queryParameters = {};
            if (requestParameters.region !== undefined) {
                queryParameters['region'] = requestParameters.region;
            }
            if (requestParameters.local !== undefined) {
                queryParameters['local'] = requestParameters.local;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['Authorization'] = String(requestParameters.authorization);
            }
            const response = yield this.request({
                path: `/lobby/v1/{appId}/create/private`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    createPrivateLobbyDeprecated(appId, authorization, region, local, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createPrivateLobbyDeprecatedRaw({ appId: appId, authorization: authorization, region: region, local: local }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    createPublicLobbyDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createPublicLobbyDeprecated.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling createPublicLobbyDeprecated.');
            }
            const queryParameters = {};
            if (requestParameters.region !== undefined) {
                queryParameters['region'] = requestParameters.region;
            }
            if (requestParameters.local !== undefined) {
                queryParameters['local'] = requestParameters.local;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['Authorization'] = String(requestParameters.authorization);
            }
            const response = yield this.request({
                path: `/lobby/v1/{appId}/create/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    createPublicLobbyDeprecated(appId, authorization, region, local, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createPublicLobbyDeprecatedRaw({ appId: appId, authorization: authorization, region: region, local: local }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    listActivePublicLobbiesDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling listActivePublicLobbiesDeprecated.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling listActivePublicLobbiesDeprecated.');
            }
            const queryParameters = {};
            if (requestParameters.local !== undefined) {
                queryParameters['local'] = requestParameters.local;
            }
            if (requestParameters.region !== undefined) {
                queryParameters['region'] = requestParameters.region;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['Authorization'] = String(requestParameters.authorization);
            }
            const response = yield this.request({
                path: `/lobby/v1/{appId}/list`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.LobbyFromJSON));
        });
    }
    /**
     */
    listActivePublicLobbiesDeprecated(appId, authorization, local, region, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listActivePublicLobbiesDeprecatedRaw({ appId: appId, authorization: authorization, local: local, region: region }, initOverrides);
            return yield response.value();
        });
    }
}
exports.LobbyV1Api = LobbyV1Api;
